/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
int length(Node *head) {
  Node *temp = head;
  int len = 0;
  while (temp != NULL) {
    len++;
    temp = temp->next;
  }
  return len;
}
Node *midPoint(Node *head) {
  if (head == 0) {
    return head;
  }
  int len = length(head);
  int mid = 0;
  if (len % 2 == 0) {
    mid = len / 2;
  } else {
    mid = len / 2 + 1;
  }
  while (mid != 1) {
    head = head->next;
    mid--;
  }
  return head;
}
Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2) {
  Node *head = NULL;
  Node *tail = NULL;
  if (head1 == NULL && head2 == NULL) {
    return head1;
  }
  if (head1 == NULL) {
    return head2;
  }
  if (head2 == NULL) {
    return head1;
  }
  if (head1->data <= head2->data) {
    head = head1;
    tail = head1;
    head1 = head1->next;
  } else {
    head = head2;
    tail = head2;
    head2 = head2->next;
  }
  while (head1 != NULL && head2 != NULL) {
    if (head1->data <= head2->data) {
      tail->next = head1;
      tail = tail->next;
      head1 = head1->next;
    } else {
      tail->next = head2;
      tail = tail->next;
      head2 = head2->next;
    }
  }
  if (head1 != NULL) {
    tail->next = head1;
  }
  if (head2 != NULL) {
    tail->next = head2;
  }
  return head;
}
Node *mergeSort(Node *head)
{
        if (head == NULL || head->next == NULL) {
          return head;
        }
        Node *mid = midPoint(head);
        Node *h1 = head;
        Node *h2 = mid->next;
        mid->next = NULL;
        h1 = mergeSort(h1);
        h2 = mergeSort(h2);
        Node *finalHead = mergeTwoSortedLinkedLists(h1, h2);
        return finalHead;
}
