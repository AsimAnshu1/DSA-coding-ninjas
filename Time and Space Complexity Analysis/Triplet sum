void merge(int input1[], int size1, int input2[], int size2){
	int size =size1+size2;
	int *arr = new int[size]; 
    int i=0, j=0, k=0;
	while(i<size1 && j < size2){
        if(input1[i]<=input2[j]){
			arr[k]= input1[i];
            i++;
            k++;
        }
        else if(input1[i]>input2[j]){
            arr[k] =input2[j];
            j++;
            k++;
        }
    }
    while(i<size1){
        arr[k] = input1[i];
        i++;
        k++;
    }
    while(j<size2){
        arr[k]= input2[j];
        j++;
        k++;
    }
    for(int i=0;i<size;i++){
        input1[i]= arr[i];
    }
}
void mergeSort(int input[], int size){
    if(size== 0 || size== 1){
        return ;
    }
    int si =0;
    int ei =size-1;
    int mid = si+(ei-si)/2;
    mergeSort(input, mid+1);
    mergeSort(input+mid+1, size-mid-1);
    if(input[0]>input[1]){
		int temp = input[0];
		input[0] =  input[1];
        input[1] = temp;
    }
    merge(input, mid+1, input+mid+1, size-mid-1);
}
int pairSum(int *arr, int n, int num)
{
    int startIndex = 0;
    int endIndex = n - 1;
    int count  = 0;
    while (startIndex < endIndex){
        if (arr[startIndex] + arr[endIndex] < num){
            startIndex++;
        }
    
        else if (arr[startIndex] + arr[endIndex] > num){
            endIndex--;
        }
        else 
        {
            int elementAtStart = arr[startIndex];
            int elementAtEnd = arr[endIndex];
            if (elementAtStart == elementAtEnd){
                int elementFromStartToEnd = endIndex - startIndex + 1;
            count += (elementFromStartToEnd * (elementFromStartToEnd - 1) / 2);
                return count;
            }
            int tempStartIndex = startIndex + 1;
            int tempEndIndex = endIndex - 1;
            while (tempStartIndex <= tempEndIndex && arr[tempStartIndex] == elementAtStart){
                tempStartIndex++;
            }
             while (tempEndIndex >= tempStartIndex && arr[tempEndIndex] == elementAtEnd){
                tempEndIndex--;
            }
            int elementFromStart = tempStartIndex - startIndex;
            int elementFromEnd = endIndex - tempEndIndex;
            count += (elementFromStart * elementFromEnd);
            startIndex = tempStartIndex;
            endIndex = tempEndIndex;
        }
    }
	return count;
}
int tripletSum(int *arr, int n, int num)
{
	    mergeSort(arr, n);
    int count = 0;
    for (int i = 0; i < n - 2; i++)
        {
            int x = pairSum(arr + i + 1, n - i - 1, num - arr[i]);
            count += x;
        }
    return count;
}
