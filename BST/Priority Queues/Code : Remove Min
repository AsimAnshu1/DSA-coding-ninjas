#include <vector>

class PriorityQueue {
    vector<int> pq;

   public:
    bool isEmpty() { 
        return pq.size() == 0; 
    }

    int getSize() { 
        return pq.size(); 
    }

    int getMin() {
        if (isEmpty()) {
            return 0;
        }

        return pq[0];
    }

    void insert(int element) {
        pq.push_back(element);

        int childIndex = pq.size() - 1;

        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;

            if (pq[childIndex] < pq[parentIndex]) {
                int temp = pq[childIndex];
                pq[childIndex] = pq[parentIndex];
                pq[parentIndex] = temp;
            } else {
                break;
            }

            childIndex = parentIndex;
        }
    }

    int removeMin() {
        int ans = pq[0];
        pq[0] = pq[pq.size()-1];
        
        pq.pop_back();

        int parentIndex = 0;
        while(parentIndex<pq.size()){
            int swapIndex = parentIndex;
        int childIndex1 = 2 * parentIndex + 1;
        int childIndex2 = 2 * parentIndex + 2;

       if(childIndex1<pq.size() && childIndex2<pq.size()){
           if(pq[childIndex1]<pq[childIndex2]){
               swapIndex = childIndex2;
           }
           else{
               swapIndex = childIndex1;
           }
       }
       else if(childIndex1<pq.size()){
         swapIndex = childIndex1;
       }
       else {
         swapIndex = childIndex2;
       }
       if(swapIndex== parentIndex){
           break;
       }
                int temp = pq[swapIndex];
               pq[swapIndex] = pq[parentIndex];
                pq[parentIndex] = temp;
              
            parentIndex = swapIndex;
        }
    return ans;
    }
};
