/***********************************************************
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
BinaryTreeNode<int>* buildTreehelper(int *postorder, int *inorder, int inS, int inE, int postS, int postE ) {
	if(inS>inE){
		return NULL;
	}
	int rootdata = postorder[postE];
	int rootIndex = -1;
	for(int i=inS; i<=inE;i++){
		if(inorder[i]== rootdata){
			rootIndex = i;
			break;
		}
	}

	int linS=inS;
	int linE= rootIndex-1;
	int lpostS=postS;
	int lpostE= linE-linS+lpostS;
	int rinS =rootIndex+1;
	int rinE= inE;
	int rpostS= lpostE+1;
	int rpostE= postE-1;

	BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootdata);
	root->left= buildTreehelper(postorder, inorder, linS, linE, lpostS, lpostE);
	root->right = buildTreehelper(postorder, inorder, rinS, rinE, rpostS, rpostE);
	return root;
}
BinaryTreeNode<int>* buildTree(int *postorder, int postLength, int *inorder, int inLength) {
	return buildTreehelper(postorder, inorder, 0, inLength-1, 0, inLength-1);
}
